#include "catch.hpp"
#include <entity/entity.hpp>
#include <entity/bson.hpp>
#include <iostream>

using namespace std;
using namespace ent;


const string convert(const vector<uint8_t> &data)
{
	return string((char *)data.data(), data.size());
}


TEST_CASE("simple types can be converted to/from BSON", "[bson]")
{
	map<string, tree> test_vectors = {
				// |      Length       |Type|  Name   |
		{ convert({ 0x0c,0x00,0x00,0x00,0x10,0x61,0x00,0x2a,0x00,0x00,0x00,0x00 }),						tree {{"a", 42 }} },							// Int32
		{ convert({ 0x10,0x00,0x00,0x00,0x12,0x61,0x00,0x34,0x1c,0xdc,0xdf,0x02,0x00,0x00,0x00,0x00 }),	tree {{"a", 12345678900 }} },					// Int64
		{ convert({ 0x10,0x00,0x00,0x00,0x01,0x61,0x00,0x1f,0x85,0xeb,0x51,0xb8,0x1e,0x09,0x40,0x00 }),	tree {{"a", 3.14 }} },							// Double
		{ convert({ 0x0e,0x00,0x00,0x00,0x02,0x61,0x00,0x02,0x00,0x00,0x00,0x62,0x00,0x00 }), 			tree {{"a", "b" }} },							// String
		{ convert({ 0x09,0x00,0x00,0x00,0x08,0x61,0x00,0x01,0x00 }), 									tree {{"a", true }} },							// Boolean
		{ convert({ 0x08,0x00,0x00,0x00,0x0a,0x61,0x00,0x00 }),											tree {{"a", nullptr }} },						// Null
		{ convert({ 0x0f,0x00,0x00,0x00,0x05,0x61,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0xff,0x00 }),		tree {{"a", vector<uint8_t> { 0x00, 0xff } }} },// Binary
	};


	SECTION("simple types can be serialised")
	{
		for (auto &i : test_vectors)
		{
			REQUIRE( encode<bson>(i.second) == i.first );
		}
	}


	SECTION("simple types can be deserialised")
	{
		for (auto &i : test_vectors)
		{
			REQUIRE( (decode<bson>(i.first)["a"] == i.second["a"]) );
		}
	}
}


TEST_CASE("arrays can be converted to/from BSON", "[bson]")
{
							//   |      Length       |Type|  Name   |      Length       |Type|  Name   |       Value       |Foot|Foot|
	string array_tree = convert({ 0x14,0x00,0x00,0x00,0x04,0x61,0x00,0x0c,0x00,0x00,0x00,0x10,0x30,0x00,0x2a,0x00,0x00,0x00,0x00,0x00 });


	SECTION("arrays can be serialised")
	{
		REQUIRE(encode<bson>({{ "a", vector<tree> { 42 } }}) == array_tree);
	}


	SECTION("arrays can be deserialised")
	{
		REQUIRE(decode<bson>(array_tree)["a"].as_array()[0].as_long() == 42);
	}
}


TEST_CASE("object trees can be converted to/from BSON", "[bson]")
{
							//    |      Length       |Type|  Name   |      Length       |Type|  Name   |       Value       |Foot|Foot|
	string object_tree = convert({ 0x14,0x00,0x00,0x00,0x03,0x61,0x00,0x0c,0x00,0x00,0x00,0x10,0x62,0x00,0x2a,0x00,0x00,0x00,0x00,0x00 });


	SECTION("object trees can be serialised")
	{
		REQUIRE(encode<bson>({{ "a", {{ "b", 42 }} }}) == object_tree);
	}


	SECTION("object trees can be deserialised")
	{
		REQUIRE(decode<bson>(object_tree)["a"]["b"].as_long() == 42);
	}
}


TEST_CASE("parser will throw exception if the BSON is invalid", "[bson]")
{
	vector<string> invalid_vectors = {
		convert({ 0x00,0x00 }),																									// Document too short
		convert({ 0x0f,0x00,0x00,0x00,0x00 }),																					// Invalid document length
		//convert({ 0x0d,0x00,0x00,0x00,0x00,0x10,0x61,0x00,0x2a,0x00,0x00,0x00,0x00 }), 										// Unexpected exit
		//convert({ 0x15,0x00,0x00,0x00,0x04,0x61,0x00,0x0d,0x00,0x00,0x00,0x00,0x10,0x31,0x00,0x2a,0x00,0x00,0x00,0x00,0x00 }),// Unexpected array exit
		convert({ 0x14,0x00,0x00,0x00,0x04,0x61,0x00,0x0f,0x00,0x00,0x00,0x10,0x30,0x00,0x2a,0x00,0x00,0x00,0x00,0x00 }),		// Invalid array document length

		convert({ 0x0a,0x00,0x00,0x00,0x10,0x61,0x00,0x2a,0x00,0x00 }),							// Insufficient data to read int32
		convert({ 0x0e,0x00,0x00,0x00,0x12,0x61,0x00,0x34,0x1c,0xdc,0xdf,0x02,0x00,0x00 }),		// Insufficient data to read int64
		convert({ 0x0e,0x00,0x00,0x00,0x01,0x61,0x00,0x1f,0x85,0xeb,0x51,0xb8,0x1e,0x09 }),		// Insufficient data to read double
		convert({ 0x0c,0x00,0x00,0x00,0x02,0x61,0x00,0x02,0x00,0x00,0x00,0x00 }),				// Insufficient data to read string
		convert({ 0x0d,0x00,0x00,0x00,0x05,0x61,0x00,0x02,0x00,0x00,0x00,0x00,0x00 }),			// Insufficient data to read binary
		convert({ 0x06,0x00,0x00,0x00,0x01,0x61 }),												// Unterminated cstring
	};

	for (auto &i : invalid_vectors)
	{
		REQUIRE_THROWS(decode<bson>(i));
	}
}
